#include <opencv2/opencv.hpp>
#include <raspicam_cv.h>
#include <iostream>
#include <chrono>
#include <ctime>

using namespace std;
using namespace cv;
using namespace raspicam;

Mat frame, Matrix, framePers, frameGray, frameThresh, frameEdge, frameFinal, frameFinalDuplicate;
Mat ROILane;
int LeftLanePos, RightLanePos;

RaspiCam_Cv Camera;

vector<int> histogramLane;

Point2f Source[] = {Point2f(40,135),Point2f(360,135),Point2f(0,185), Point2f(400,185)};
Point2f Destination[] = {Point2f(100,0),Point2f(280,0),Point2f(100,240), Point2f(280,240)};

void Setup ( int argc,char **argv, RaspiCam_Cv &Camera )
{
    Camera.set ( CAP_PROP_FRAME_WIDTH,  ( "-w",argc,argv,400 ) );
    Camera.set ( CAP_PROP_FRAME_HEIGHT,  ( "-h",argc,argv,240 ) );
    Camera.set ( CAP_PROP_BRIGHTNESS, ( "-br",argc,argv,50 ) );
    Camera.set ( CAP_PROP_CONTRAST ,( "-co",argc,argv,50 ) );
    Camera.set ( CAP_PROP_SATURATION,  ( "-sa",argc,argv,50 ) );
    Camera.set ( CAP_PROP_GAIN,  ( "-g",argc,argv ,50 ) );
    Camera.set ( CAP_PROP_FPS,  ( "-fps",argc,argv,100));
}

void Capture()
{
    Camera.grab();
    Camera.retrieve(frame);
    cvtColor(frame, frame, COLOR_BGR2RGB);
}

void Perspective()
{
    //line(frame,Source[0], Source[1], Scalar(0,0,255), 2);
    //line(frame,Source[1], Source[3], Scalar(0,0,255), 2);
    //line(frame,Source[3], Source[2], Scalar(0,0,255), 2);
    //line(frame,Source[2], Source[0], Scalar(0,0,255), 2);

    //line(framePers,Destination[0], Destination[1], Scalar(0,255,0), 2);
    //line(framePers,Destination[1], Destination[3], Scalar(0,255,0), 2);
    //line(framePers,Destination[3], Destination[2], Scalar(0,255,0), 2);
    //line(framePers,Destination[2], Destination[0], Scalar(0,255,0), 2);

    Matrix = getPerspectiveTransform(Source, Destination);
    warpPerspective(frame, framePers, Matrix, Size(400,240));
}

void Histogram()
{
    histogramLane.resize(400);
    histogramLane.clear();
    
    for(int i=0; i<400; i++)       //frame.size().width = 400
    {
	ROILane = frameFinalDuplicate(Rect(i,140,1,100));
	divide(255, ROILane, ROILane);
	histogramLane.push_back((int)(sum(ROILane)[0])); 
    }
}

void Threshold()
{
    cvtColor(framePers, frameGray, COLOR_RGB2GRAY);
    inRange(frameGray, 230, 255, frameThresh);
    Canny(frameGray,frameEdge, 900, 900, 3, false);
    add(frameThresh, frameEdge, frameFinal);
    cvtColor(frameFinal, frameFinal, COLOR_GRAY2RGB);
    cvtColor(frameFinal, frameFinalDuplicate, COLOR_RGB2BGR);	//used histogram function only
}

void LaneFinder()
{
    vector<int>:: iterator LeftPtr;
    LeftPtr = max_element(histogramLane.begin(), histogramLane.begin() + 150);
    LeftLanePos = distance(histogramLane.begin(), LeftPtr); 
    
    vector<int>:: iterator RightPtr;
    RightPtr = max_element(histogramLane.begin() +250, histogramLane.end());
    RightLanePos = distance(histogramLane.begin(), RightPtr);
    
    line(frameFinal, Point2f(LeftLanePos, 0), Point2f(LeftLanePos, 240), Scalar(0, 255,0), 2);
    line(frameFinal, Point2f(RightLanePos, 0), Point2f(RightLanePos, 240), Scalar(0,255,0), 2); 
}

int main(int argc,char **argv)
{
    Setup(argc, argv, Camera);
    cout<<"Connecting to camera"<<endl;

    if (!Camera.open())
    {
        cout<<"Failed to Connect"<<endl;
    }
    cout<<"Camera Id = "<<Camera.getId()<<endl; 
    
    while(1)
    {
        auto start = std::chrono::system_clock::now();
        Capture();
	Perspective();
	Threshold();
	Histogram();
        LaneFinder();
        
	namedWindow("original", WINDOW_KEEPRATIO);
	moveWindow("original", 50, 100);
	resizeWindow("original", 640, 480);
	imshow("original", frame);

	namedWindow("Perspective", WINDOW_KEEPRATIO);
	moveWindow("Perspective", 640, 100);
	resizeWindow("Perspective", 640, 480);
	imshow("Perspective", framePers);

	namedWindow("Gray", WINDOW_KEEPRATIO);
	moveWindow("Gray", 1280, 100);
	resizeWindow("Gray", 640, 480);
	imshow("Gray", frameFinal);

	waitKey(1);
	auto end = std::chrono::system_clock::now();

	std::chrono::duration<double> elapsed_seconds = end-start;

	float t = elapsed_seconds.count();
	int FPS = 1/t;
	cout<<"FPS = "<<FPS<<endl;
    }

    return 0;
}
